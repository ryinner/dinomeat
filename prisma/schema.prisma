// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  isAdmin       Boolean   @default(false)
  createdAt     DateTime  @default(now()) @map("created_at") @db.Timestamp(0)

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamp(0)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamp(0)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamp(0)

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  slug        String?
  price       Float    @default(0)
  description String?  @db.Text
  published   Boolean  @default(false)
  length      Float    @default(1) /// В см
  width       Float    @default(1) /// В см
  height      Float    @default(1) /// В см
  weight      Float    @default(1) /// В кг
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamp(0)

  properties ProductProperty[]
  seo        ProductSeo[]
  images     ProductImage[]
  movements  ProductMovement[]

  @@map("products")
}

model ProductProperty {
  id         Int      @id @default(autoincrement())
  productId  Int      @map("product_id")
  propertyId Int      @map("property_id")
  valueId    Int      @map("value_id")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamp(0)

  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  value    Value    @relation(fields: [valueId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([productId, propertyId])
  @@map("products_properties")
}

model Property {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamp(0)

  values   Value[]
  products ProductProperty[]

  @@map("properties")
}

model Value {
  id         Int       @id @default(autoincrement())
  value      String
  propertyId Int       @map("property_id")
  createdAt  DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamp(0)

  property Property          @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  products ProductProperty[]

  @@map("values")
}

model ProductSeo {
  id        Int       @id @default(autoincrement())
  seoId     Int       @map("seo_id")
  productId Int       @map("product_id")
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(0)

  seo     Seo     @relation(fields: [seoId], references: [id], onUpdate: Cascade, onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onUpdate: Cascade, onDelete: Cascade)

  @@unique([seoId, productId])
  @@map("products_seo")
}

model Seo {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  keywords    String?
  createdAt   DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt   DateTime  @updatedAt @map("upduted_at") @db.Timestamp(0)

  products ProductSeo[]

  @@map("seo")
}

model ProductImage {
  id        Int       @id @default(autoincrement())
  productId Int       @map("product_id")
  imageId   Int       @map("image_id")
  createdAt DateTime? @default(now()) @map("created_at") @db.Timestamp(0)

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  image   Image   @relation(fields: [imageId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("products_images")
}

model Image {
  id        Int            @id @default(autoincrement())
  alt       String?
  url       String
  createdAt DateTime?      @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime       @updatedAt @map("upduted_at") @db.Timestamp(0)
  products  ProductImage[]

  @@map("images")
}

model ProductMovement {
  id           Int       @id @default(autoincrement())
  productId    Int       @map("product_id")
  status       Int       @default(0)
  sellingPrice Float     @map("selling_price")
  createdAt    DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt    DateTime  @updatedAt @map("upduted_at") @db.Timestamp(0)

  product Product @relation(fields: [productId], references: [id], onUpdate: Restrict, onDelete: Restrict)

  @@map("products_movement")
}
